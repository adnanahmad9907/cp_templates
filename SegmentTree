
// Adnan Ahmads template of  segment tree (cf handle:adnanahmad)
/*
===============================
     SEGMENT TREE TEMPLATE
===============================
1. Create the segment tree:
   SegmentTree<ll> st(n, mergeFn, neutralValue);

2. Build from input vector:
   st.build(a);

3. Query from l to r (inclusive):
   st.query(l, r);

4. Update a single position:
   st.update(index, newValue);

--------------------------------
ðŸ§  COMMON MERGE FUNCTIONS:

â€¢ SUM      â†’ [](ll a, ll b) { return a + b; }, 0LL
â€¢ MIN      â†’ [](ll a, ll b) { return min(a, b); }, LLONG_MAX
â€¢ MAX      â†’ [](ll a, ll b) { return max(a, b); }, LLONG_MIN
â€¢ GCD      â†’ [](ll a, ll b) { return __gcd(a, b); }, 0LL
â€¢ XOR      â†’ [](ll a, ll b) { return a ^ b; }, 0LL

===============================
*/

template <typename T>
struct SegmentTree
{
    ll n;
    vector<T> tree;
    function<T(T, T)> merge;
    T NEUTRAL;

    SegmentTree(ll size, function<T(T, T)> mergeFn, T neutral)
    {
        n = size;
        merge = mergeFn;
        NEUTRAL = neutral;
        tree.assign(4 * n, NEUTRAL);
    }

    void build(const vector<T> &a, ll v, ll tl, ll tr)
    {
        if (tl == tr)
        {
            tree[v] = a[tl];
        }
        else
        {
            ll tm = (tl + tr) / 2;
            build(a, v * 2, tl, tm);
            build(a, v * 2 + 1, tm + 1, tr);
            tree[v] = merge(tree[v * 2], tree[v * 2 + 1]);
        }
    }

    void build(const vector<T> &a)
    {
        build(a, 1, 0, n - 1);
    }

    T query(ll v, ll tl, ll tr, ll l, ll r)
    {
        if (l > r)
            return NEUTRAL;
        if (l == tl && r == tr)
            return tree[v];
        ll tm = (tl + tr) / 2;
        return merge(
            query(v * 2, tl, tm, l, min(r, tm)),
            query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r));
    }

    T query(ll l, ll r)
    {
        return query(1, 0, n - 1, l, r);
    }

    void update(ll v, ll tl, ll tr, ll pos, T new_val)
    {
        if (tl == tr)
        {
            tree[v] = new_val;
        }
        else
        {
            ll tm = (tl + tr) / 2;
            if (pos <= tm)
                update(v * 2, tl, tm, pos, new_val);
            else
                update(v * 2 + 1, tm + 1, tr, pos, new_val);
            tree[v] = merge(tree[v * 2], tree[v * 2 + 1]);
        }
    }

    void update(ll pos, T new_val)
    {
        update(1, 0, n - 1, pos, new_val);
    }
};
