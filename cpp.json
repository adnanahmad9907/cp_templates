{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }



	"array wali": {
  "prefix": "arr",
  "body": [
    "#include <bits/stdc++.h>",
    "using namespace std;",
    "#define nl '\\n'",
    "#define IO                            \\",
    "    ios_base::sync_with_stdio(false); \\",
    "    cin.tie(NULL);",
    "typedef long long ll;",
    "const long long mod = 1e9 + 7;",
    " ",
    "signed main()",
    "{",
    "    IO;",
    "    ll t = 1;",
    "    cin >> t;",
    "    for (ll z = 0; z < t; z++)",
    "    {",
    "        ll n;",
    "        cin>>n;",
    "        vector<ll> arr(n);",
    "        for (int i = 0; i < n; i++)",
    "        {",
    "            cin >> arr[i];",
    "        }",
	"$0",
    "    }",
    "}"
  ],
  "description": ""
},
"simple ": {
  "prefix": "zainab",
  "body": [
    "#include <bits/stdc++.h>",
    "using namespace std;",
    "#define nl '\\n'",
    "#define IO                            \\",
    "    ios_base::sync_with_stdio(false); \\",
    "    cin.tie(NULL);",
    "typedef long long ll;",
    "const long long mod = 1e9 + 7;",
    " ",
    "signed main()",
    "{",
    "    IO;",
    "    ll t = 1;",
    "    cin >> t;",
    "    for (ll z = 0; z < t; z++)",
    "    {",
    "        ll n;",
    "        cin>>n;",
	"$0",
    "    }",
    "}"
  ],
  "description": ""
},
"binary expo": {
  "prefix": "power",
  "body": [
    "ll pow(ll a, ll b, ll mod = mod)",
    "{",
    "    a %= mod;",
    "    ll res = 1;",
    "    while (b > 0)",
    "    {",
    "        if (b & 1)",
    "            res = (res * a) % mod;",
    "        a = (a * a) % mod;",
    "        b >>= 1;",
    "    }",
    "    return res;",
    "}"
  ],
  "description": ""
}
}
